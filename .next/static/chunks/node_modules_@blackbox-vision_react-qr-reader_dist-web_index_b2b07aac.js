(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@blackbox-vision/react-qr-reader/dist-web/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "QrReader": (()=>QrReader),
    "useQrReader": (()=>useQrReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$umd$2f$zxing$2d$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/umd/zxing-browser.js [app-client] (ecmascript)");
;
;
const isMediaDevicesSupported = ()=>{
    const isMediaDevicesSupported = typeof navigator !== 'undefined' && !!navigator.mediaDevices;
    if (!isMediaDevicesSupported) {
        console.warn(`[ReactQrReader]: MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"`);
    }
    return isMediaDevicesSupported;
};
const isValidType = (value, name, type)=>{
    const isValid = typeof value === type;
    if (!isValid) {
        console.warn(`[ReactQrReader]: Expected "${name}" to be a of type "${type}".`);
    }
    return isValid;
};
const useQrReader = ({ scanDelay: delayBetweenScanAttempts, constraints: video, onResult, videoId })=>{
    const controlsRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(null);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "useQrReader.useEffect": ()=>{
            const codeReader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$umd$2f$zxing$2d$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BrowserQRCodeReader"](null, {
                delayBetweenScanAttempts
            });
            if (!isMediaDevicesSupported() && isValidType(onResult, 'onResult', 'function')) {
                const message = 'MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"';
                onResult(null, new Error(message), codeReader);
            }
            if (isValidType(video, 'constraints', 'object')) {
                codeReader.decodeFromConstraints({
                    video
                }, videoId, {
                    "useQrReader.useEffect": (result, error)=>{
                        if (isValidType(onResult, 'onResult', 'function')) {
                            onResult(result, error, codeReader);
                        }
                    }
                }["useQrReader.useEffect"]).then({
                    "useQrReader.useEffect": (controls)=>controlsRef.current = controls
                }["useQrReader.useEffect"]).catch({
                    "useQrReader.useEffect": (error)=>{
                        if (isValidType(onResult, 'onResult', 'function')) {
                            onResult(null, error, codeReader);
                        }
                    }
                }["useQrReader.useEffect"]);
            }
            return ({
                "useQrReader.useEffect": ()=>{
                    var _controlsRef$current;
                    (_controlsRef$current = controlsRef.current) === null || _controlsRef$current === void 0 ? void 0 : _controlsRef$current.stop();
                }
            })["useQrReader.useEffect"];
        }
    }["useQrReader.useEffect"], []);
};
const styles = {
    container: {
        width: '100%',
        paddingTop: '100%',
        overflow: 'hidden',
        position: 'relative'
    },
    video: {
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        display: 'block',
        overflow: 'hidden',
        position: 'absolute',
        transform: undefined
    }
};
const QrReader = ({ videoContainerStyle, containerStyle, videoStyle, constraints, ViewFinder, scanDelay, className, onResult, videoId })=>{
    useQrReader({
        constraints,
        scanDelay,
        onResult,
        videoId
    });
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])("section", {
        className: className,
        style: containerStyle
    }, /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])("div", {
        style: {
            ...styles.container,
            ...videoContainerStyle
        }
    }, !!ViewFinder && /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])(ViewFinder, null), /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])("video", {
        muted: true,
        id: videoId,
        style: {
            ...styles.video,
            ...videoStyle,
            transform: (constraints === null || constraints === void 0 ? void 0 : constraints.facingMode) === 'user' && 'scaleX(-1)'
        }
    })));
};
QrReader.displayName = 'QrReader';
QrReader.defaultProps = {
    constraints: {
        facingMode: 'user'
    },
    videoId: 'video',
    scanDelay: 500
};
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@blackbox-vision/react-qr-reader/dist-web/index.js [app-client] (ecmascript, next/dynamic entry)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/@blackbox-vision/react-qr-reader/dist-web/index.js [app-client] (ecmascript)"));
}}),
}]);

//# sourceMappingURL=node_modules_%40blackbox-vision_react-qr-reader_dist-web_index_b2b07aac.js.map